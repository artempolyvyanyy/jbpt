#summary Exemplary usage of the algorithms implemented in jBPT.

= Overview =

This page shall show the usage of the algorithms implemented in jBPT using simple example snippets.

== Process Graphs ==

=== How to create a process graph ===

We create a process graph with the following structure
{{{
         -- t3 --- t4 --
         |             |
   t1 -- s2 ---------- j5 -- t9
         |             |    
         |_ s6 --- j7 _|   
            |_ t8 _|         

}}}
{{{
// Create the process graph
Process p = new Process();

// Create the tasks
Task t1 = new Task("1");
Task t3 = new Task("3");
Task t4 = new Task("4");
Task t8 = new Task("8");
Task t9 = new Task("9");

// Add tasks to process graph
p.addTask(t1);
p.addTask(t3);
p.addTask(t4);
p.addTask(t8);
p.addTask(t9);

// Create gateways
Gateway s2 = new Gateway(GatewayType.XOR, "2");
Gateway s6 = new Gateway(GatewayType.AND, "6");
Gateway j7 = new Gateway(GatewayType.AND, "7");
Gateway j5 = new Gateway(GatewayType.XOR, "5");

// Add gateways to process graph
p.addGateway(s2);
p.addGateway(s6);
p.addGateway(j7);
p.addGateway(j5);

// Add control flow edges
p.addControlFlow(t1, s2);
p.addControlFlow(s2, t3);
p.addControlFlow(s2, s6);
p.addControlFlow(s2, j5);
p.addControlFlow(t3, t4);
p.addControlFlow(t4, j5);
p.addControlFlow(s6, j7);
p.addControlFlow(s6, t8);
p.addControlFlow(t8, j7);
p.addControlFlow(j7, j5);
p.addControlFlow(j5, t9);
}}}

=== How to check some basic properties of a process graph ===

We want to know whether a process graph has cycles and how many nodes have no predecessors or successors, respectively.

{{{

/* Create an algorithms object for a process graph, which 
 * is a directed graph defined with nodes and control flow
 */
DirectedGraphAlgorithms<ControlFlow, Node> dga = new DirectedGraphAlgorithms<ControlFlow, Node>();

/*
 * Assume that p is an object of type Process. Then, we use the
 * algorithms object to check the properties.
 */
System.out.println("Process graph has cycles: " + dga.hasCycles(p));
System.out.println("Process graph has " + dga.getInputVertices(p).size() + " nodes without predecessors.");
System.out.println("Process graph has " + dga.getOutputVertices(p).size() + " nodes without successors.");
}}}

=== How to create the RPST of a process graph ===

We want to create the Refined Process Structure Tree of a process graph.

{{{
/*
 * Assume that p is an object of type Process. 
 * Then, we create the RPST as follows.
 */
RPST<ControlFlow,Node> rpst = new RPST<ControlFlow,Node>(p);
System.out.println(rpst);
}}}

== Petri Nets ==

=== How to create a Petri net ===

We create a simple workflow net with one initial place, one final place, and four transitions. Transitions b and c may be enabled concurrently.

{{{
// Create the net
PetriNet net1 = new PetriNet();

// Create the transitions with according labels
Transition a = new Transition("a");
Transition b = new Transition("b");
Transition c = new Transition("c");
Transition d = new Transition("d");

// Add transitions to net
net1.addNode(a);
net1.addNode(b);
net1.addNode(c);
net1.addNode(d);

// Create places
Place p1 = new Place("1");
Place p2 = new Place("2");
Place p3 = new Place("3");
Place p4 = new Place("4");
Place p5 = new Place("5");
Place p6 = new Place("6");

// Set one token as the initial marking for this place
p1.setTokens(1);

// Add places to net 
net1.addNode(p1);
net1.addNode(p2);
net1.addNode(p3);
net1.addNode(p4);
net1.addNode(p5);
net1.addNode(p6);

// Add control flow edges
net1.addFlow(p1, a);
net1.addFlow(a, p2);
net1.addFlow(a, p3);
net1.addFlow(p2, b);
net1.addFlow(p3, c);
net1.addFlow(b, p4);
net1.addFlow(c, p5);
net1.addFlow(p4, d);
net1.addFlow(p5, d);
net1.addFlow(d, p6);
}}}
